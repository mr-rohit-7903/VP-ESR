services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: vp-esr-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=${BACKEND_PORT}
      - MONGODB_URI=${MONGODB_URI}
    env_file:
      - ./backend/.env
    networks:
      - app-network
    volumes:
      - backend-logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_APP_API_PREFIX=${VITE_APP_API_PREFIX}
    container_name: vp-esr-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    env_file:
      - ./frontend/.env
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Reverse proxy for production deployment
  nginx:
    image: nginx:alpine
    container_name: vp-esr-proxy
    restart: unless-stopped
    ports:
      - "${PROXY_PORT:-80}:80"
      - "${PROXY_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  app-network:
    driver: bridge
    name: vp-esr-network

volumes:
  backend-logs:
    driver: local
  nginx-logs:
    driver: local